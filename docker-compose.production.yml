version: '3.8'

services:
  # API Gateway
  gateway:
    image: lift/gateway-service:${GATEWAY_VERSION:-latest}
    container_name: lift-gateway
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - DEBUG=false
      - AUTH_SERVICE_URL=http://auth:8001
      - BILLING_SERVICE_URL=http://billing:8002
      - MEMORY_SERVICE_URL=http://memory:8003
      - OBSERVABILITY_SERVICE_URL=http://observability:8004
      - REGISTRY_SERVICE_URL=http://registry:8005
    env_file:
      - .env.production
    depends_on:
      auth:
        condition: service_healthy
      registry:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - lift-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Authentication Service
  auth:
    image: lift/auth-service:${AUTH_VERSION:-latest}
    container_name: lift-auth
    ports:
      - "8001:8001"
    environment:
      - ENVIRONMENT=production
      - DEBUG=false
    env_file:
      - .env.production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - lift-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Billing Service
  billing:
    image: lift/billing-service:${BILLING_VERSION:-latest}
    container_name: lift-billing
    ports:
      - "8002:8002"
    environment:
      - ENVIRONMENT=production
      - DEBUG=false
    env_file:
      - .env.production
    depends_on:
      postgres:
        condition: service_healthy
      auth:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - lift-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Memory Service
  memory:
    image: lift/memory-service:${MEMORY_VERSION:-latest}
    container_name: lift-memory
    ports:
      - "8003:8003"
    environment:
      - ENVIRONMENT=production
      - DEBUG=false
    env_file:
      - .env.production
    depends_on:
      postgres:
        condition: service_healthy
      auth:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - lift-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Observability Service
  observability:
    image: lift/observability-service:${OBSERVABILITY_VERSION:-latest}
    container_name: lift-observability
    ports:
      - "8004:8004"
    environment:
      - ENVIRONMENT=production
      - DEBUG=false
    env_file:
      - .env.production
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - lift-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Registry Service
  registry:
    image: lift/registry-service:${REGISTRY_VERSION:-latest}
    container_name: lift-registry
    ports:
      - "8005:8005"
    environment:
      - ENVIRONMENT=production
      - DEBUG=false
    env_file:
      - .env.production
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - lift-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: lift-postgres
    environment:
      POSTGRES_DB: ${DATABASE_NAME:-lift_os_prod}
      POSTGRES_USER: ${DATABASE_USER:-lift_user}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER:-lift_user} -d ${DATABASE_NAME:-lift_os_prod}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - lift-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: lift-redis
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped
    networks:
      - lift-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: lift-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - lift-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: lift-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - lift-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Elasticsearch for Logging
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: lift-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    networks:
      - lift-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Logstash for Log Processing
  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: lift-logstash
    volumes:
      - ./monitoring/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    ports:
      - "5044:5044"
    depends_on:
      elasticsearch:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - lift-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Kibana for Log Visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: lift-kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      elasticsearch:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - lift-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: lift-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - gateway
    restart: unless-stopped
    networks:
      - lift-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Surfacing Service (Node.js)
  surfacing-service:
    image: daleparr/lift-os-surfacing:latest
    container_name: lift-surfacing-service
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=production
      - PORT=3002
    env_file:
      - .env.production
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - lift-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Surfacing Module (Python wrapper)
  surfacing:
    image: lift/surfacing-module:${SURFACING_VERSION:-latest}
    container_name: lift-surfacing
    ports:
      - "8007:8007"
    environment:
      - ENVIRONMENT=production
      - DEBUG=false
      - SURFACING_SERVICE_URL=http://surfacing-service:3002
      - MEMORY_SERVICE_URL=http://memory:8003
      - AUTH_SERVICE_URL=http://auth:8001
      - REGISTRY_SERVICE_URL=http://registry:8005
    env_file:
      - .env.production
    depends_on:
      surfacing-service:
        condition: service_healthy
      memory:
        condition: service_healthy
      auth:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8007/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - lift-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Causal AI Service (Node.js/Python hybrid)
  causal-service:
    image: daleparr/lift-causal-ai:latest
    container_name: lift-causal-service
    ports:
      - "3003:3003"
    environment:
      - NODE_ENV=production
      - PORT=3003
      - PYTHON_ENV=production
    env_file:
      - .env.production
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - lift-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Causal AI Module (Python wrapper)
  causal:
    image: lift/causal-module:${CAUSAL_VERSION:-latest}
    container_name: lift-causal
    ports:
      - "8008:8008"
    environment:
      - ENVIRONMENT=production
      - DEBUG=false
      - CAUSAL_SERVICE_URL=http://causal-service:3003
      - MEMORY_SERVICE_URL=http://memory:8003
      - AUTH_SERVICE_URL=http://auth:8001
      - REGISTRY_SERVICE_URL=http://registry:8005
    env_file:
      - .env.production
    depends_on:
      causal-service:
        condition: service_healthy
      memory:
        condition: service_healthy
      auth:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8008/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - lift-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # LLM Service (Python FastAPI)
  llm-service:
    build:
      context: .
      dockerfile: Dockerfile.llm-service
    container_name: lift-llm-service
    ports:
      - "3004:3004"
    environment:
      - ENVIRONMENT=production
      - PORT=3004
      - DEBUG=false
    env_file:
      - .env.production
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - lift-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # LLM Module (Python wrapper)
  llm:
    build:
      context: .
      dockerfile: modules/llm/Dockerfile
    container_name: lift-llm
    ports:
      - "8009:8009"
    environment:
      - ENVIRONMENT=production
      - DEBUG=false
      - LLM_SERVICE_URL=http://llm-service:3004
      - MEMORY_SERVICE_URL=http://memory:8003
      - AUTH_SERVICE_URL=http://auth:8001
      - REGISTRY_SERVICE_URL=http://registry:8005
    env_file:
      - .env.production
    depends_on:
      llm-service:
        condition: service_healthy
      memory:
        condition: service_healthy
      auth:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8009/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - lift-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

networks:
  lift-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local