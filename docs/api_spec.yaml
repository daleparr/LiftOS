components:
  schemas:
    HealthResponse:
      properties:
        service:
          example: gateway
          type: string
        status:
          example: healthy
          type: string
        timestamp:
          format: date-time
          type: string
        uptime:
          example: 3600.5
          type: number
        version:
          example: 1.0.0
          type: string
      required:
      - status
      - service
      - timestamp
      type: object
    LoginResponse:
      properties:
        access_token:
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
          type: string
        expires_in:
          example: 3600
          type: integer
        token_type:
          example: bearer
          type: string
        user:
          $ref: '#/components/schemas/UserResponse'
      required:
      - access_token
      - token_type
      - expires_in
      - user
      type: object
    MemoryStoreRequest:
      properties:
        context:
          properties:
            org_id:
              example: org_123
              type: string
            user_id:
              example: user_123
              type: string
          type: object
        key:
          example: user_preference_theme
          type: string
        value:
          example:
            language: en
            theme: dark
          type: object
      required:
      - key
      - value
      - context
      type: object
    MemoryStoreResponse:
      properties:
        key:
          example: user_preference_theme
          type: string
        memory_id:
          example: mem_123456
          type: string
        stored_at:
          format: date-time
          type: string
      required:
      - memory_id
      - key
      - stored_at
      type: object
    ModuleListResponse:
      properties:
        modules:
          items:
            $ref: '#/components/schemas/ModuleResponse'
          type: array
        total:
          example: 5
          type: integer
      required:
      - modules
      - total
      type: object
    ModuleRegistration:
      properties:
        endpoint:
          example: http://localhost:9001
          format: uri
          type: string
        name:
          example: analytics-module
          type: string
        version:
          example: 1.2.0
          type: string
      required:
      - name
      - version
      - endpoint
      type: object
    ModuleResponse:
      properties:
        module_id:
          example: mod_123456
          type: string
        name:
          example: analytics-module
          type: string
        status:
          example: active
          type: string
        version:
          example: 1.2.0
          type: string
      required:
      - module_id
      - name
      - version
      - status
      type: object
    ReadinessResponse:
      properties:
        checks:
          items:
            properties:
              message:
                type: string
              name:
                type: string
              status:
                type: string
            type: object
          type: array
        service:
          example: gateway
          type: string
        status:
          example: ready
          type: string
        timestamp:
          format: date-time
          type: string
      required:
      - status
      - service
      - timestamp
      - checks
      type: object
    SearchRequest:
      properties:
        context:
          properties:
            org_id:
              type: string
            user_id:
              type: string
          type: object
        limit:
          default: 10
          maximum: 100
          minimum: 1
          type: integer
        query:
          example: user preferences for dark theme
          type: string
      required:
      - query
      - context
      type: object
    SearchResponse:
      properties:
        query_time:
          example: 0.045
          type: number
        results:
          items:
            properties:
              memory_id:
                type: string
              score:
                maximum: 1
                minimum: 0
                type: number
            type: object
          type: array
        total:
          example: 25
          type: integer
      required:
      - results
      - total
      - query_time
      type: object
    UserLogin:
      properties:
        email:
          example: user@example.com
          format: email
          type: string
        password:
          example: securepassword123
          type: string
      required:
      - email
      - password
      type: object
    UserRegistration:
      properties:
        email:
          example: user@example.com
          format: email
          type: string
        org_id:
          example: org_123
          type: string
        password:
          example: securepassword123
          minLength: 8
          type: string
      required:
      - email
      - password
      - org_id
      type: object
    UserResponse:
      properties:
        created_at:
          format: date-time
          type: string
        email:
          example: user@example.com
          type: string
        org_id:
          example: org_123
          type: string
        user_id:
          example: user_123
          type: string
      required:
      - user_id
      - email
      - org_id
      type: object
  securitySchemes:
    BearerAuth:
      bearerFormat: JWT
      scheme: bearer
      type: http
info:
  contact:
    email: support@liftos.com
    name: Lift OS Core Team
  description: Unified API documentation for the Lift OS Core platform - a modular,
    scalable operating system for orchestrating all Lift products
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  title: Lift OS Core API
  version: 1.0.0
openapi: 3.0.3
paths:
  /auth/health:
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
          description: Service is healthy
      summary: Auth Service Health Check
      tags:
      - Auth Health
  /auth/login:
    post:
      description: Authenticate user and return JWT token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
          description: Login successful
        '401':
          description: Invalid credentials
      summary: User Login
      tags:
      - Authentication
  /auth/register:
    post:
      description: Register a new user in the system
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
          description: User registered successfully
        '400':
          description: Invalid registration data
        '409':
          description: User already exists
      summary: User Registration
      tags:
      - Authentication
  /health:
    get:
      description: Check the health status of the Gateway service
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
          description: Service is healthy
      summary: Gateway Health Check
      tags:
      - Gateway Health
  /memory/health:
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
          description: Service is healthy
      summary: Memory Service Health Check
      tags:
      - Memory Health
  /memory/search:
    post:
      description: Perform semantic search using the Knowledge Storage Engine
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResponse'
          description: Search completed successfully
        '400':
          description: Invalid search query
        '401':
          description: Unauthorized
      security:
      - BearerAuth: []
      summary: Semantic Search
      tags:
      - KSE Operations
  /memory/store:
    post:
      description: Store a memory item in the Knowledge Storage Engine
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MemoryStoreRequest'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemoryStoreResponse'
          description: Memory stored successfully
        '400':
          description: Invalid memory data
        '401':
          description: Unauthorized
      security:
      - BearerAuth: []
      summary: Store Memory
      tags:
      - Memory Operations
  /ready:
    get:
      description: Check if the Gateway service is ready to handle requests
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadinessResponse'
          description: Service is ready
      summary: Gateway Readiness Check
      tags:
      - Gateway Health
  /registry/health:
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
          description: Service is healthy
      summary: Registry Service Health Check
      tags:
      - Registry Health
  /registry/modules:
    get:
      description: Get list of all registered modules
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModuleListResponse'
          description: Modules retrieved successfully
        '401':
          description: Unauthorized
      security:
      - BearerAuth: []
      summary: List Modules
      tags:
      - Module Management
    post:
      description: Register a new module in the system
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModuleRegistration'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModuleResponse'
          description: Module registered successfully
        '400':
          description: Invalid module data
        '401':
          description: Unauthorized
        '409':
          description: Module already exists
      security:
      - BearerAuth: []
      summary: Register Module
      tags:
      - Module Management
servers:
- description: Development Gateway Server
  url: http://localhost:8000
- description: Production Gateway Server
  url: https://api.liftos.com
